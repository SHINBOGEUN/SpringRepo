<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id = "customAccessDenied" class = "com.korea.security.CustomAccessDeniedHandler"></bean>
	
	<bean id = "customLoginSuccess" class = "com.korea.security.CustomLoginSuccessHandler"></bean>
	
	<bean id = "bcryptPasswordEncoder" class = "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
	<bean id = "customUserDetailsService" class = "com.korea.security.CustomUserDetailsService"></bean>
	
	<security:http>
		<!-- url에 대해 접근 권한을 체크해서 접근을 허용할지 안할지를 결정하게 해주는 역할을 하는 구문 -->
		<security:intercept-url pattern="/SecTest/all" access="permitAll" />
		<security:intercept-url pattern="/SecTest/member" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/SecTest/admin" access="hasRole('ROLE_ADMIN')" />
	
		<security:access-denied-handler ref="customAccessDenied" />
	
		<security:form-login login-page="/SecTest/customLogin"
			authentication-success-handler-ref="customLoginSuccess"/>
		<!-- 권한 없는 사용자 처리방법 -->
		<!--<security:access-denied-handler error-page="/SecTest/accessError" /> -->	
		
		<security:logout logout-url = "/SecTest/customLogout" invalidate-session = "true"
		delete-cookies="remember-me,JSESSION_ID"/>
		
		
		
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	</security:http>
	
	<!-- 사용자 아이디/비밀번호를 인증처리 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
		
			<!-- <security:user-service>
				
				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}1234" authorities="ROLE_MEMBER,ROLE_ADMIN"/>
				
			</security:user-service> -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select userid, userpw, enabled from tblmember where userid=?"
				authorities-by-username-query="select userid, auth from tblmember_auth where userid=?"
			/> -->
			<security:password-encoder ref = "bcryptPasswordEncoder"/>
			
			
		</security:authentication-provider>
		
	</security:authentication-manager>
	
	
</beans>
